// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  name        String
  email       String   @unique
  document    String
  phoneNumber Int
  password    String
  isAdmin     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  userAddress UserAddress?

  userClient  UserClient[]
  userProduct UserProduct[]
  charge      Charge[]
  checkout    Checkout[]

  @@map("users")
}

model UserAddress {
  id           String   @id @default(uuid())
  street       String
  number       String
  neighborhood String
  complement   String?
  updatedAt    DateTime @default(now())

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  @@map("users-addresses")
}

model UserClient {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  name        String
  document    String
  email       String
  phoneNumber Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  userClientAddress UserClientAddress?
  charge            Charge[]

  @@map("users-clients")
}

model UserClientAddress {
  userClientId String
  userClient   UserClient @relation(fields: [userClientId], references: [id])

  @@id([userClientId])
  @@map("users-clients-addresses")
}

model UserProduct {
  id         String   @id @default(uuid())
  userId     String
  name       String
  value      Int
  fixedValue Boolean
  active     Boolean
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  user   User     @relation(fields: [userId], references: [id])
  charge Charge[]

  @@map("users-products")
}

enum ChargeStatus {
  PENDING
  PAID
  REFUNDED
}

model Charge {
  id            String       @id @default(uuid())
  userId        String
  userClientId  String?
  userProductId String?
  checkoutId    String?
  status        ChargeStatus @default(PENDING)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now())

  user        User         @relation(fields: [userId], references: [id])
  userClient  UserClient?  @relation(fields: [userClientId], references: [id])
  userProduct UserProduct? @relation(fields: [userProductId], references: [id])
  checkout    Checkout?

  @@map("charges")
}

// model ChargeInformation {
//   id                String  @id @default(uuid())
//   chargeId          String
//   value             Int
//   productName       String?
//   productValue      Int?
//   clientName        String
//   clientEmail       String
//   clientDocument    String
//   clientPhoneNumber String

// charge Charge @relation(fields: [chargeId], references: [id])
// }

model Checkout {
  id        String   @id @default(uuid())
  chargeId  String   @unique
  userId    String
  slug      String   @unique @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  charge Charge @relation(fields: [chargeId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@map("checkouts")
}
