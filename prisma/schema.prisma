// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum DocumentType {
  CPF
  CNPJ
}

model User {
  id           String       @id @default(uuid())
  name         String
  email        String       @unique
  documentType DocumentType
  document     String
  phoneNumber  Int
  password     String
  isAdmin      Boolean      @default(false)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @default(now())

  userAddress UserAddress?

  userClient  UserClient[]
  userProduct UserProduct[]
  charge      Charge[]
  checkout    Checkout[]

  @@map("users")
}

model UserAddress {
  id         String   @id @default(uuid())
  street     String
  number     String
  complement String?
  zipCode    String
  city       String
  district   String
  stateCode  String // UF
  updatedAt  DateTime @default(now())

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  @@map("users-addresses")
}

model UserClient {
  id           String       @id @default(uuid())
  userId       String
  user         User         @relation(fields: [userId], references: [id])
  name         String
  documentType DocumentType
  document     String
  email        String
  phoneNumber  Int
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @default(now())

  userClientAddress UserClientAddress?
  charge            Charge[]

  @@map("users-clients")
}

model UserClientAddress {
  street       String
  number       String
  complement   String?
  zipCode      String
  city         String
  district     String
  stateCode    String // UF
  userClientId String
  userClient   UserClient @relation(fields: [userClientId], references: [id])

  @@id([userClientId])
  @@map("users-clients-addresses")
}

model UserProduct {
  id         String   @id @default(uuid())
  userId     String
  name       String
  value      Int
  fixedValue Boolean
  active     Boolean
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  user   User     @relation(fields: [userId], references: [id])
  charge Charge[]

  @@map("users-products")
}

model ChargeStatus {
  id            Int      @id @default(autoincrement())
  statusName    String
  description   String?
  external_name String   @default("")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  Charge        Charge[]

  @@map("charges-statuses")
}

enum PaymentType {
  CREDIT_CARD
  BOLETO
  PIX
}

model Charge {
  id            String   @id @default(uuid())
  userId        String
  userClientId  String?
  userProductId String?
  amountInCents Int
  expireDate    DateTime
  externalId    String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())

  statusId Int          @default(0)
  status   ChargeStatus @relation(fields: [statusId], references: [id])

  selectedPaymentTypes PaymentType[]

  user        User         @relation(fields: [userId], references: [id])
  userClient  UserClient?  @relation(fields: [userClientId], references: [id])
  userProduct UserProduct? @relation(fields: [userProductId], references: [id])
  checkout    Checkout?

  @@map("charges")
}

model Checkout {
  id                String      @id @default(uuid())
  chargeId          String      @unique
  userId            String
  slug              String      @unique @default(uuid())
  externalId        String?
  digitableLine     String?
  barcodeNumber     String?
  paymentTypeChosen PaymentType?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @default(now())

  charge Charge @relation(fields: [chargeId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@map("checkouts")
}
